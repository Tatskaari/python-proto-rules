subinclude("///proto//build_defs/sdk", "///python//build_defs:python")

def python_grpc_library(name:str, language:str, srcs:list, deps:list=[], visibility:list=None, labels:list&features&tags=[],
                      test_only:bool&testonly=False, root_dir:str='', protoc_flags:list=[], additional_context:dict=None):
    deps += [CONFIG.PYTHON_PROTO.PROTO_DEP, CONFIG.PYTHON_PROTO.GRPC_DEP]
    tools = {'py': [CONFIG.PYTHON_PROTO.PLUGIN]}

    protoc = protoc_rule(
        name = name,
        srcs = srcs,
        language = language,
        tools = tools,
        protoc_flags = protoc_flags,
        plugin_flags = [
            '--python_out="$OUT_DIR"',
            '--plugin=protoc-gen-grpc-python="$(which $TOOLS_PY)"',
            '--grpc-python_out="$OUT_DIR"',
        ],
        labels = labels,
        test_only = test_only,
        root_dir = root_dir,
        deps = deps,
        visibility = visibility,
    )

    return python_library(
        name = f"_{name}#{language}",
        srcs = [protoc],
        deps = deps,
        test_only = test_only,
        labels = labels,
        visibility = visibility,
    )

def python_proto_library(name:str, language:str, srcs:list, deps:list=[], visibility:list=None, labels:list&features&tags=[],
                      test_only:bool&testonly=False, root_dir:str='', protoc_flags:list=[], additional_context:dict=None):
    deps += [CONFIG.PYTHON_PROTO.PROTO_DEP]
    protoc = protoc_rule(
        name = name,
        srcs = srcs,
        language = language,
        protoc_flags = protoc_flags,
        plugin_flags = [
            '--python_out="$OUT_DIR"',
        ],
        labels = labels,
        test_only = test_only,
        root_dir = root_dir,
        deps = deps,
        visibility = visibility,
    )

    return python_library(
        name = f"_{name}#{language}",
        srcs = [protoc],
        deps = deps,
        test_only = test_only,
        labels = labels,
        visibility = visibility,
    )

def python_grpc_language():
    return proto_language(
        language = "py",
        build_def = python_grpc_library,
    )

def python_proto_language():
    return proto_language(
        language = "py",
        build_def = python_proto_library,
    )
